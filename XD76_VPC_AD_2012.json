{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "**Version 1.08, 3-3-2016** STEP-AD This template creates a VPC infrastructure for a multi-AZ, multi-tier deployment of a Windows based Application infrstructure. It installs 2 Active Directory Domain Controllers into subnets in seperate AZs inside a VPC, as well as Bastion Host and NAT instances into the DMZ for each Availability Zone. The default Domain Administrator password will be the one retrieved from the instance.  For adding members to the domain, ensure that they are launched into the domain member security group created by this template and then configure them to use the AD instances fixed private IP addresses as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters"               : {
        "KeyPairName"			: {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type"        : "String"
        },
        "AD1InstanceType"		: {
            "Description" : "Amazon EC2 instance type for the first Active Directory Instance",
            "Type"        : "String",
            "Default"     : "t2.medium",
            "AllowedValues" : [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "r3.large",
                "r3.xlarge",
                "t2.small",
                "t2.medium",
				"t2.large"
            ]
        },
        "AD2InstanceType"		: {
            "Description" : "Amazon EC2 instance type for the second Active Directory Instance",
            "Type"        : "String",
            "Default"     : "t2.medium",
            "AllowedValues" : [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "r3.large",
                "r3.xlarge",
                "t2.small",
                "t2.medium",
				"t2.large"
            ]
        },
        "NATInstanceType"		: {
            "Description" : "Amazon EC2 instance type for the NAT Instances",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ]
        },
        "BastionInstanceType"	: {
            "Description" : "Amazon EC2 instance type for the Bastion Host",
            "Type"        : "String",
            "Default"     : "t2.small",
            "AllowedValues" : [
                "t2.small",
                "t2.medium"
            ]
        },
        "DomainDNSName"			: {
            "Description" : "Fully qualified domain name (FQDN) to be used for the DHCP scope e.g. xencloud.net",
            "Type"        : "String",
            "Default"     : "xencloud.net",
            "MinLength"   : "3",
            "MaxLength"   : "25",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DomainNetBIOSName"		: {
            "Description" : "NetBIOS name for the domain (XENCLOUD)",
            "Type"        : "String",
            "Default"     : "XENCLOUD"
        },
        "ADServerNetBIOSName1"	: {
            "Description" : "NetBIOS name of the 1st AD Server (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "DC1",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "ADServerNetBIOSName2"	: {
            "Description" : "NetBIOS name of the 2nd AD Server (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "DC2",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "RestoreModePassword"	: {
            "Description" : "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho"         : "True"
        },
        "DomainAdminUser"		: {
            "Description" : "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
            "Type"        : "String",
            "Default"     : "XenAdmin",
            "MinLength"   : "5",
            "MaxLength"   : "25",
            "AllowedPattern" : "[a-zA-Z0-9]*"
        },
        "DomainAdminPassword"	: {
            "Description" : "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho"         : "True"
        },
        "UserCount"				: {
            "Description" : "Total number of test user accounts to create in Active Directory",
            "Type"        : "Number",
            "Default"     : "25"
        },
        "DMZ1CIDR"				: {
            "Description" : "CIDR Block for the Public DMZ Subnet 1 located in AZ1",
            "Type"        : "String",
            "Default"     : "10.16.1.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DMZ2CIDR"				: {
            "Description" : "CIDR Block for the Public DMZ Subnet 2 located in AZ2",
            "Type"        : "String",
            "Default"     : "10.16.2.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "Infra1CIDR"			: {
            "Description" : "CIDR Block for Infrastructure Subnet 1 located in AZ1",
            "Type"        : "String",
            "Default"     : "10.16.3.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "Infra2CIDR"			: {
            "Description" : "CIDR Block for Infrastructure Subnet 2 located in AZ2",
            "Type"        : "String",
            "Default"     : "10.16.4.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
		"NS1CIDR"				:{
         "Description":"CIDR Block for the NetScaler Management Subnet 1 located in AZ1",
         "Type":"String",
         "Default":"10.16.9.0/24",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
		"NS2CIDR"				:{
         "Description":"CIDR Block for the NetScaler Management Subnet 2 located in AZ2",
         "Type":"String",
         "Default":"10.16.10.0/24",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
        "Web1CIDR"				: {
            "Description" : "CIDR Block for Web/StoreFront Subnet 1 located in AZ1",
            "Type"        : "String",
            "Default"     : "10.16.7.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "Web2CIDR"				: {
            "Description" : "CIDR Block for Web/Storefront Subnet 1 located in AZ2",
            "Type"        : "String",
            "Default"     : "10.16.8.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "Worker1CIDR"			: {
            "Description" : "CIDR Block for Desktop Workers Subnet 1 located in AZ1",
            "Type"        : "String",
            "Default"     : "10.16.5.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "Worker2CIDR"			: {
            "Description" : "CIDR Block for Desktop Workers Subnet 2 located in AZ2",
            "Type"        : "String",
            "Default"     : "10.16.6.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "VPCCIDR"				: {
            "Description" : "CIDR Block for the VPC",
            "Type"        : "String",
            "Default"     : "10.16.0.0/16",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "VPCName"				: {
            "Default" : "XenApp - XenDesktop 7.x VPC",
            "Description" : "The name of the Virtual Private Cloud",
            "Type"        : "String"
        },
		"AZ1":{
         "Description":"Name of Availabilty Zone that will contain public & private subnets - Select a valid Zone for your region",
         "Type":"String",
         "Default":"us-east-1b",
         "AllowedValues":[
            "eu-central-1a",
			"eu-central-1b",
			"eu-west-1a",
            "eu-west-1b",
            "eu-west-1c",
            "us-east-1b",
            "us-east-1c",
            "us-east-1d",
            "us-east-1e",
            "us-west-1a",
            "us-west-1c",
            "ap-southeast-1a",
            "ap-southeast-1b",
            "ap-southeast-2a",
            "ap-southeast-2b",
            "ap-southeast-2c",
            "ap-northeast-1a",
            "ap-northeast-1b",
            "ap-northeast-1c",
            "ap-northeast-2a",
            "ap-northeast-2c",
            "us-west-2a",
            "us-west-2b",
            "us-west-2c",
            "sa-east-1a",
            "sa-east-1b",
			"sa-east-1c"
         ],
         "ConstraintDescription":"Must be a valid EC2 Availabilty zone for region being deployed to."
      },
		"AZ2":{
         "Description":"Name of Availabilty Zone that will contain public & private subnets - Select a valid Zone for your region",
         "Type":"String",
         "Default":"us-east-1c",
         "AllowedValues":[
            "eu-central-1a",
			"eu-central-1b",
			"eu-west-1a",
            "eu-west-1b",
            "eu-west-1c",
            "us-east-1b",
            "us-east-1c",
            "us-east-1d",
            "us-east-1e",
            "us-west-1a",
            "us-west-1c",
            "ap-southeast-1a",
            "ap-southeast-1b",
            "ap-southeast-2a",
            "ap-southeast-2b",
            "ap-southeast-2c",
            "ap-northeast-1a",
            "ap-northeast-1b",
            "ap-northeast-1c",
            "ap-northeast-2a",
            "ap-northeast-2c",
            "us-west-2a",
            "us-west-2b",
            "us-west-2c",
            "sa-east-1a",
            "sa-east-1b",
			"sa-east-1c"
         ],
         "ConstraintDescription":"Must be a valid EC2 Availabilty zone for region being deployed to. Only supports eu-west-1 ,us-east-1 & us-west-1 etc <- You can customize if you define a constraint"
      },
        "AD1PrivateIp"			: {
            "Description" : "Fixed private IP for the first Active Directory server located in AZ1",
            "Type"        : "String",
            "Default"     : "10.16.3.5"
        },
        "AD2PrivateIp"			: {
            "Description" : "Fixed private IP for the second Active Directory serverr located in AZ2",
            "Type"        : "String",
            "Default"     : "10.16.4.5"
        }
    },
    "Mappings"                 : {
        "AWSInstanceType2Arch" : {
            "t2.micro"  : {
                "Arch" : "64"
            },
            "t2.small"  : {
                "Arch" : "64"
            },
            "t2.medium" : {
                "Arch" : "64"
            },
            "t2.large" : {
                "Arch" : "64"
            },
            "m4.large" : {
                "Arch" : "64"
            },
            "m4.xlarge" : {
                "Arch" : "64"
            },
            "m3.medium"  : {
                "Arch" : "64"
            },
            "m3.large"  : {
                "Arch" : "64"
            },
            "m3.xlarge"  : {
                "Arch" : "64"
            },
            "c4.large"  : {
                "Arch" : "64"
            },
            "c4.xlarge"  : {
                "Arch" : "64"
            },
            "c4.2xlarge"  : {
                "Arch" : "64"
            },
			"c3.large"  : {
                "Arch" : "64"
            },
            "c3.xlarge"  : {
                "Arch" : "64"
            },
            "c3.2xlarge"  : {
                "Arch" : "64"
            },
			"r3.large"  : {
                "Arch" : "64"
            },
            "r3.xlarge"  : {
                "Arch" : "64"
            }
            
        },
        "AWSRegionArch2AMI"    : {
            "us-east-1" : {
                "64" : "ami-c8a9baa2"
            },
            "us-west-2" : {
                "64" : "ami-87c037e7"
            },
            "us-west-1" : {
                "64" : "ami-032f5063"
            },
            "eu-west-1" : {
                "64" : "ami-9ebb39ed"
            },
            "eu-central-1" : {
                "64" : "ami-3acf2f55"
            },
            "ap-southeast-1" : {
                "64" : "ami-63489d00"
            },
            "ap-northeast-1" : {
                "64" : "ami-ff435e91"
            },
            "ap-northeast-2" : {
                "64" : "ami-c6de16a8"
            },
            "ap-southeast-2" : {
                "64" : "ami-16645a75"
            },
			"sa-east-1"      : {
                "64" : "ami-6efd7302"
            }
        },
        "AWSRegionArchNatAMI"  : {
            "us-east-1" : {
                "64" : "ami-4c9e4b24"
            },
            "us-west-2" : {
                "64" : "ami-bb69128b"
            },
            "us-west-1" : {
                "64" : "ami-2b2b296e"
            },
            "eu-west-1" : {
                "64" : "ami-3760b040"
            },
            "eu-central-1" : {
                "64" : "ami-204c7a3d"
            },
            "ap-southeast-1" : {
                "64" : "ami-b082dae2"
            },
            "ap-southeast-2" : {
                "64" : "ami-996402a3"
            },
            "ap-northeast-1" : {
                "64" : "ami-55c29e54"
            },
            "sa-east-1"      : {
                "64" : "ami-b972dba4"
            }
        }
    },
    "Resources"                : {
        "XenCloudDhcpOptions" : {
            "Type" : "AWS::EC2::DHCPOptions",
            "Properties" : {
                "DomainName" : {
                    "Ref" : "DomainDNSName"
                },
                "DomainNameServers" : [
                    "AmazonProvidedDNS"
                ],
                "NtpServers"        : [
                    {
                        "Ref" : "AD1PrivateIp"
                    }
                ],
                "NetbiosNameServers" : [
                    {
                        "Ref" : "AD1PrivateIp"
                    },
                    {
                        "Ref" : "AD2PrivateIp"
                    }
                ],
                "NetbiosNodeType"    : "2",
                "Tags"               : [
                    {
                        "Key" : "Domain",
                        "Value" : {
                            "Ref" : "DomainDNSName"
                        }
                    }
                ]
            }
        },
        "VPC"                 : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : {
                    "Ref" : "VPCCIDR"
                },
                "Tags"      : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    },
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "VPCName"
                        }
                    }
                ]
            }
        },
        "XenCloudVPCDHCPOptionsAssociation" : {
            "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "DhcpOptionsId" : {
                    "Ref" : "XenCloudDhcpOptions"
                }
            }
        },
        "DMZ1Subnet"                        : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "DMZ1CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ1"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "DMZ 1 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "DMZ 1 Subnet"
                    }
                ]
            }
        },
        "DMZ2Subnet"                        : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "DMZ2CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ2"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "DMZ 2 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "DMZ 2 Subnet"
                    }
                ]
            }
        },
        "Infra1Subnet"                      : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "Infra1CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ1"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "XA/XD InfraStructure1 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "XA/XD InfraStructure1 Subnet"
                    }
                ]
            }
        },
        "Infra2Subnet"                      : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "Infra2CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ2"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "Infra2 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "XA/XD InfraStructure2 Subnet"
                    }
                ]
            }
        },
		"NS1Subnet"							:{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"NS1CIDR"
            },
            "AvailabilityZone":{
               "Ref":"AZ1"
            },
            "Tags":[
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               },
               {
                  "Key":"Role",
                  "Value":"NS 1 Subnet"
               }
            ]
         }
      },
		"NS2Subnet"								:{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"NS2CIDR"
            },
            "AvailabilityZone":{
               "Ref":"AZ2"
            },
            "Tags":[
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               },
               {
                  "Key":"Role",
                  "Value":"NS 2 Subnet"
               }
            ]
         }
      },
        "Web1Subnet"							: {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "Web1CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ1"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "Web1 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "StoreFront/Web 1 Subnet"
                    }
                ]
            }
        },
        "Web2Subnet"							: {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "Web2CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ2"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "Web2 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "StoreFront/Web 2 Subnet"
                    }
                ]
            }
        },
        "Worker1Subnet"							: {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "Worker1CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ1"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "Worker1 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "Worker1 Subnet"
                    }
                ]
            }
        },
        "Worker2Subnet"							: {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "Worker2CIDR"
                },
                "AvailabilityZone" : {
                    "Ref" : "AZ2"
                },
                "Tags"             : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "Worker2 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "Worker2 Subnet"
                    }
                ]
            }
        },
        "InternetGateway"						: {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    }
                ]
            }
        },
        "AttachGateway"							: {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "InternetGatewayId" : {
                    "Ref" : "InternetGateway"
                }
            }
        },
        "DMZRouteTable"							: {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "DMZ"
                    }
                ]
            }
        },
        "DMZRoute"								: {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "DMZRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId"            : {
                    "Ref" : "InternetGateway"
                }
            }
        },
        "DMZ1SubnetRouteTableAssociation"		: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "DMZ1Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "DMZRouteTable"
                }
            }
        },
        "DMZ2SubnetRouteTableAssociation"		: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "DMZ2Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "DMZRouteTable"
                }
            }
        },
        "Private1RouteTable"					: {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "AZ1 Private"
                    }
                ]
            }
        },
        "Private1Route"							: {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "Private1RouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT1"
                }
            }
        },
        "Private2RouteTable"					: {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Application",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "AZ2 Private"
                    }
                ]
            }
        },
        "Private2Route"							: {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "Private2RouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT2"
                }
            }
        },
        "PrivateSubnetRouteTableAssociation1"	: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "Infra1Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "Private1RouteTable"
                }
            }
        },
        "PrivateSubnetRouteTableAssociation2"	: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "Infra2Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "Private2RouteTable"
                }
            }
        },
        "Web1SubnetRouteTableAssociation"		: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "Web1Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "Private1RouteTable"
                }
            }
        },
        "Web2SubnetRouteTableAssociation"		: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "Web2Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "Private2RouteTable"
                }
            }
        },
        "Worker1SubnetRouteTableAssociation"	: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "Worker1Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "Private1RouteTable"
                }
            }
        },
        "Worker2SubnetRouteTableAssociation"	: {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "Worker2Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "Private2RouteTable"
                }
            }
        },
        "NAT1"									: {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArchNatAMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "NATInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "NATInstanceType"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "NATAZ1"
                    }
                ],
                "NetworkInterfaces" : [
                    {
                        "GroupSet" : [
                            {
                                "Ref" : "NATSG"
                            }
                        ],
                        "AssociatePublicIpAddress" : "true",
                        "DeviceIndex"              : "0",
                        "DeleteOnTermination"      : "true",
                        "SubnetId"                 : {
                            "Ref" : "DMZ1Subnet"
                        }
                    }
                ],
                "KeyName"           : {
                    "Ref" : "KeyPairName"
                },
                "SourceDestCheck"   : "false"
            }
        },
        "NAT2"									: {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "NAT1",
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArchNatAMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "NATInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "NATInstanceType"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "NATAZ2"
                    }
                ],
                "NetworkInterfaces" : [
                    {
                        "GroupSet" : [
                            {
                                "Ref" : "NATSG"
                            }
                        ],
                        "AssociatePublicIpAddress" : "true",
                        "DeviceIndex"              : "0",
                        "DeleteOnTermination"      : "true",
                        "SubnetId"                 : {
                            "Ref" : "DMZ2Subnet"
                        }
                    }
                ],
                "KeyName"           : {
                    "Ref" : "KeyPairName"
                },
                "SourceDestCheck"   : "false"
            }
        },
        "DomainController1"                    : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "NAT2",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "installADDS",
                            "configureSites",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DomainController1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r DomainController1",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1"       : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\New-XD7POCADUser.ps1"      : {
                                "source" : "https://s3.amazonaws.com/cf-XenDesktop/RA/Scripts/New-XD7POCADUser.ps1"
                            },
                            "c:\\cfn\\scripts\\users.csv"              : {
                                "source" : "https://s3.amazonaws.com/cf-XenDesktop/RA/Scripts/New-XD7POCUsers.csv"
                            },
                            "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1" : {
                                "source" : "https://s3.amazonaws.com/cf-XenDesktop/RA/Scripts/ConvertTo-EnterpriseAdmin.ps1"
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-disable-win-fw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "a-set-static-ip" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "45"
                            },
                            "b-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe Rename-Computer -NewName ",
                                            {
                                                "Ref" : "ADServerNetBIOSName1"
                                            },
                                            " -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installADDS" : {
                        "commands" : {
                            "1-install-prereqs" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "2-install-adds"    : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"Install-ADDSForest -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " ",
                                            "-SafeModeAdministratorPassword (convertto-securestring ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -asplaintext -force) ",
                                            "-DomainMode Win2012 ",
                                            "-DomainNetbiosName ",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            " ",
                                            "-ForestMode Win2012 ",
                                            "-Confirm:$false ",
                                            "-Force\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            },
                            "3-restart-service" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command Restart-Service NetLogon -EA 0"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "180"
                            },
                            "4-create-adminuser" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"New-ADUser ",
                                            "-Name ",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            " ",
                                            "-UserPrincipalName ",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "@",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "5-update-adminuser" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "6-run-CreateUsers-script" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\New-XD7POCADUser.ps1 -Count ",
                                            {
                                                "Ref" : "UserCount"
                                            },
                                            " -UpnSuffix ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Password Citrix!123 -EA 0"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configureSites" : {
                        "commands" : {
                            "a-rename-default-site" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "\"",
                                            "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "b-create-site-2"       : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe New-ADReplicationSite AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "c-create-dmzsubnet-1"  : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "DMZ1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "d-create-dmzsubnet-2"  : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "DMZ2CIDR"
                                            },
                                            " -Site AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "e-create-infrasubnet-1"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "Infra1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "f-create-infrasubnet-2"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "Infra2CIDR"
                                            },
                                            " -Site AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "g-create-websubnet-1"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "Web1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "h-create-websubnet-2"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "Web2CIDR"
                                            },
                                            " -Site AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "i-create-workersubnet-1"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "Worker1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "j-create-workersubnet-2"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "Worker2CIDR"
                                            },
                                            " -Site AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "m-set-site-link"       : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-ADReplicationSiteLink -Filter * | Set-ADReplicationSiteLink -SitesIncluded @{add='AZ2'} -ReplicationFrequencyInMinutes 15\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "finalize"       : {
                        "commands" : {
                            "a-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "DomainController1WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD1InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "AD1InstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "Infra1Subnet"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "ADServerNetBIOSName1"
                        }
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "100",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainControllerSG"
                    },
                    {
                        "Ref" : "DomainMemberSG"
                    }
                ],
                "PrivateIpAddress"    : {
                    "Ref" : "AD1PrivateIp"
                },
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r DomainController1",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DomainController2"                   : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainController1WaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "join",
                            "addDomainController",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DomainController2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r DomainController2",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1"       : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "AD1PrivateIp"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-disable-win-fw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "a-set-static-ip" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "45"
                            },
                            "b-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe Rename-Computer -NewName ",
                                            {
                                                "Ref" : "ADServerNetBIOSName2"
                                            },
                                            " -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "join"       : {
                        "commands" : {
                            "a-join-domain" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Add-Computer -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "addDomainController" : {
                        "commands" : {
                            "1-install-prereqs" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "2-add-dc"          : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Install-ADDSDomainController -InstallDns -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-SafeModeAdministratorPassword ",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force) ",
                                            "-Confirm:$false -Force\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "finalize"            : {
                        "commands" : {
                            "a-update-dns-servers-dc2" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "AD1PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "AD2PrivateIp"
                                            },
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "b-update-dns-servers-dc1" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"Invoke-Command -Scriptblock{ ",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "AD2PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "AD1PrivateIp"
                                            },
                                            " } -ComputerName ",
                                            {
                                                "Ref" : "ADServerNetBIOSName1"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "c-signal-success"         : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "DomainController2WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "AD2InstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "Infra2Subnet"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "ADServerNetBIOSName2"
                        }
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "100",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainControllerSG"
                    },
                    {
                        "Ref" : "DomainMemberSG"
                    }
                ],
                "PrivateIpAddress"    : {
                    "Ref" : "AD2PrivateIp"
                },
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r DomainController2",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Bastion1"                            : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainController1WaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "join",
                            "installRDS",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Bastion1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r Bastion1",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Configure-BASTION.ps1"  : {
                                "source" : "https://s3.amazonaws.com/cf-XenDesktop/RA/Scripts/Configure-Bastion.ps1"
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "1-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command Rename-Computer -NewName BASTION1 -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "join"       : {
                        "commands" : {
                            "a-set-dns-servers" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "AD1PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "AD2PrivateIp"
                                            },
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "30"
                            },
                            "b-join-domain"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Add-Computer -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installRDS" : {
                        "commands" : {
                            "a-install-rds" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
                                        ]
                                    ]
                                }
                            },
                            "b-configure-rdgw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\Configure-BASTION.ps1 -ServerFQDN BASTION1.",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            " -GroupName 'domain admins'"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "finalize"   : {
                        "commands" : {
                            "1-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "Bastion1WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "BastionInstanceType"
                },
				"NetworkInterfaces" : [{
					"GroupSet"					:	[{  "Ref" : "BastionSG" }, { "Ref" : "DomainMemberSG" }],
					"AssociatePublicIpAddress"	:	"true",
					"DeviceIndex"				:	"0",
					"DeleteOnTermination"		:	"true",
					"SubnetId"					:	{ "Ref" : "DMZ1Subnet" }
				}],
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "BastionAZ1"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "standard"
                        }
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r Bastion1",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Bastion2"                            : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainController2WaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "join",
                            "installRDS",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Bastion2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r Bastion2",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Configure-Bastion.ps1"  : {
                                "source" : "https://s3.amazonaws.com/cf-XenDesktop/RA/Scripts/Configure-Bastion.ps1"
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "1-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command Rename-Computer -NewName Bastion2 -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "join"       : {
                        "commands" : {
                            "a-set-dns-servers" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "AD2PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "AD1PrivateIp"
                                            },
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "30"
                            },
                            "b-join-domain"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Add-Computer -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installRDS" : {
                        "commands" : {
                            "a-install-rds" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
                                        ]
                                    ]
                                }
                            },
                            "b-configure-rdgw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\Configure-Bastion.ps1 -ServerFQDN Bastion2.",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            " -GroupName 'domain admins'"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "finalize"   : {
                        "commands" : {
                            "1-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "Bastion2WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "BastionInstanceType"
                },
				"NetworkInterfaces" : [{
					"GroupSet"					:	[{  "Ref" : "BastionSG" }, { "Ref" : "DomainMemberSG" }],
					"AssociatePublicIpAddress"	:	"true",
					"DeviceIndex"				:	"0",
					"DeleteOnTermination"		:	"true",
					"SubnetId"					:	{ "Ref" : "DMZ2Subnet" }
				}],
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "BastionAZ2"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r Bastion2",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DomainController1WaitCondition"       : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "DomainController1",
            "Properties" : {
                "Handle" : {
                    "Ref" : "DomainController1WaitHandle"
                },
                "Timeout" : "3600"
            }
        },
        "DomainController1WaitHandle"          : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "DomainController2WaitCondition"      : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "DomainController2",
            "Properties" : {
                "Handle" : {
                    "Ref" : "DomainController2WaitHandle"
                },
                "Timeout" : "3600"
            }
        },
        "DomainController2WaitHandle"         : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "Bastion1WaitCondition"               : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "Bastion1",
            "Properties" : {
                "Handle" : {
                    "Ref" : "Bastion1WaitHandle"
                },
                "Timeout" : "3000"
            }
        },
        "Bastion1WaitHandle"                  : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "Bastion2WaitCondition"               : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "Bastion2",
            "Properties" : {
                "Handle" : {
                    "Ref" : "Bastion2WaitHandle"
                },
                "Timeout" : "3000"
            }
        },
        "Bastion2WaitHandle"                  : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "DomainControllerSG"                 : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Domain Controller",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5985",
                        "ToPort"     : "5985",
                        "CidrIp"     : {
                            "Ref" : "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "123",
                        "ToPort"     : "123",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "135",
                        "ToPort"     : "135",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "138",
                        "ToPort"     : "138",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "636",
                        "ToPort"     : "636",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "636",
                        "ToPort"     : "636",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3268",
                        "ToPort"     : "3268",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3269",
                        "ToPort"     : "3269",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3268",
                        "ToPort"     : "3268",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3269",
                        "ToPort"     : "3269",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZ2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "DMZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "DMZ2CIDR"
                        }
                    }
                ]
            }
        },
        "DomainMemberSG"                      : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Domain Members",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Web1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Web1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Web1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Web1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Worker1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Worker1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Worker1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Worker1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Web2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Web2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Web2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Web2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Worker2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "Worker2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Worker2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Worker2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZ2CIDR"
                        }
                    }
                ]
            }
        },
        "StoreFrontSG"                     : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable StoreFront access from NetScalers and to Delivery Controllers",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
						}
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
						}
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    }
                ]
            }
        },
        "DDCSG"                     : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access from NetScalers and Workers to Delivery Controllers",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    }
                ]
            }
        },
        "WorkerSG"                  : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Desktop Workers",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "1494",
                        "ToPort"     : "1494",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "2598",
                        "ToPort"     : "2598",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPrivateSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DDCSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "135",
                        "ToPort"     : "135",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DDCSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DDCSG"
                        }
                    }
                ]
            }
        },
        "NATSG"						: {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enables SSH access to NAT1 in AZ1 via port 22 and outbound internet access via private subnets",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "22",
                        "ToPort"     : "22",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "Infra2CIDR"
                        }
					},
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Web1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "Web1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Web2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "Web2CIDR"
                        }
					},
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Worker1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "Worker1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Worker2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "Worker2CIDR"
                        }
                    }
                ]
            }
        },
        "BastionSG"					: {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable RDP access from the Internet",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : "0.0.0.0/0"
                    }
                ]
            }
        },
        "NSPublicSG"                : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "NetScaler Public Security Group",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : "0.0.0.0/0"
                    }
                ],
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "22",
                        "ToPort"     : "22",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "1494",
                        "ToPort"     : "1494",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "2598",
                        "ToPort"     : "2598",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : "0.0.0.0/0"
                    }
                ]
            }
        },
        "NSPrivateSG"               : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Private Security Group",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "1494",
                        "ToPort"     : "1494",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "2598",
                        "ToPort"     : "2598",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5985",
                        "ToPort"     : "5986",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "27000",
                        "ToPort"     : "27000",
                        "SourceSecurityGroupId" : {
                            "Ref" : "NSPublicSG"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "0",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "Infra1CIDR"
                        }
                    }
                ]
            }
        },
		"NSSecurityGroup"			:{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Enable communication between and with NetScaler VPX NSIPs in both AZs resources",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"icmp",
                  "FromPort":"-1",
                  "ToPort":"-1",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"67",
                  "ToPort":"67",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"123",
                  "ToPort":"123",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"161",
                  "ToPort":"161",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"500",
                  "ToPort":"500",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"4500",
                  "ToPort":"4500",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"3003",
                  "ToPort":"3003",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"443",
                  "ToPort":"443",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"3008",
                  "ToPort":"3011",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"4001",
                  "ToPort":"4001",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"80",
                  "ToPort":"80",
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
		"AllOpenSecurityGroup"		:{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Enable access to NetScalers Infrastructure ENIs from all private subnet",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"icmp",
                  "FromPort":"-1",
                  "ToPort":"-1",
                  "CidrIp":{
                     "Ref":"Infra1CIDR"
                  }
               },
               {
                  "IpProtocol":"icmp",
                  "FromPort":"-1",
                  "ToPort":"-1",
                  "CidrIp":{
                     "Ref":"Infra2CIDR"
                  }
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Infra1CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Infra1CIDR"
                  }
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Infra2CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Infra2CIDR"
                  }
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Web1CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Web1CIDR"
                  }
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Web2CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Web2CIDR"
                  }
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Worker1CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Worker1CIDR"
                  }
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Worker2CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"Worker2CIDR"
                  }
               }
            ]
         }
      }


    },
    "Outputs"                  : {
        "Bastion1PublicIP" : {
            "Value" : { "Fn::GetAtt" : [ "Bastion1", "PublicIp" ] },
            "Description" : "Public IP address of the Bastion Host (Bastion1) in AZ1"
        },
        "RootCert1"         : {
            "Value" : "c:\\Bastion1.cer",
            "Description" : "Location of the root SSL certificate on the Bastion Host (Bastion1) in AZ1"
        },
        "Bastion2PublicIP" : {
            "Value" : { "Fn::GetAtt" : [ "Bastion2", "PublicIp" ] },
            "Description" : "Public IP address of the Bastion Host (Bastion2) in AZ2"
        },
        "RootCert2"         : {
            "Value" : "c:\\Bastion2.cer",
            "Description" : "Location of the root SSL certificate on the Bastion Host (Bastion2) in AZ2"
        },
        "DomainAdmin"       : {
            "Value" : {
                "Fn::Join" : [
                    "",
                    [
                        {
                            "Ref" : "DomainNetBIOSName"
                        },
                        "\\",
                        {
							"Ref" : "DomainAdminUser"
                         }
                    ]
                ]
            },
            "Description" : "Domain administrator account"
        },
        "VPC"               : {
            "Value" : {
                "Ref" : "VPC"
            },
            "Description" : "VPC ID"
        },
        "VPCCIDR"           : {
            "Value" : {
                "Ref" : "VPCCIDR"
            },
            "Description" : "VPC CIDR"
        },
        "PublicSubnet1Id"   : {
            "Value" : {
                "Ref" : "DMZ1Subnet"
            },
            "Description" : "Subnet ID for the public subnet in AZ1"
        },
        "PublicSubnet2Id"   : {
            "Value" : {
                "Ref" : "DMZ2Subnet"
            },
            "Description" : "Subnet ID for the public in AZ2"
        },
        "InfraSubnet1Id"	: {
            "Value" : {
                "Ref" : "Infra1Subnet"
            },
            "Description" : "Private Subnet ID in AZ1"
        },
        "InfraSubnet2Id"	: {
            "Value" : {
                "Ref" : "Infra2Subnet"
            },
            "Description" : "Private Subnet ID in AZ2"
        },
        "WebSubnet1Id"	: {
            "Value" : {
                "Ref" : "Web1Subnet"
            },
            "Description" : "StoreFront Subnet ID in AZ1"
        },
        "WebSubnet2Id"	: {
            "Value" : {
                "Ref" : "Web2Subnet"
            },
            "Description" : "StoreFront Subnet ID in AZ2"
        },
        "NSSubnet1Id"		: {
            "Value" : {
                "Ref" : "NS1Subnet"
            },
            "Description" : "Private Subnet ID in AZ1"
        },
        "NSSubnet2Id"		: {
            "Value" : {
                "Ref" : "NS2Subnet"
            },
            "Description" : "Private Subnet ID in AZ2"
        },
        "DomainMemberSGID"  : {
            "Value" : {
                "Ref" : "DomainMemberSG"
            },
            "Description" : "Domain Member Security Group ID"
        },
        "DDCSGID"			: {
            "Value" : {
                "Ref" : "DDCSG"
            },
            "Description" : "Delivery Controller Security Group ID"
        },
        "WorkerSGID"		: {
            "Value" : {
                "Ref" : "WorkerSG"
            },
            "Description" : "XenApp / XenDesktop Worker Security Group ID"
        },
        "SFSGID"			: {
            "Value" : {
                "Ref" : "StoreFrontSG"
            },
            "Description" : "StoreFront Security Group ID"
        },
		"PublicSGID"		: {
            "Value" : {
                "Ref" : "NSPublicSG"
            },
            "Description" : "Public Access Security Group ID"
        },
		"PrivateSGID"		: {
            "Value" : {
                "Ref" : "NSPrivateSG"
            },
            "Description" : "Private Security Group ID"
        },
		"NSSGID"			:{
			"Value":{
				"Ref":"NSSecurityGroup"
			},
			"Description":"Security Group for NetScaler Management Network"
		},
		"AllOpenSGID"		:{
			"Value":{
				"Ref":"AllOpenSecurityGroup"
			},
			"Description":"Security Group used by CloudBridge and NetScaler ENIs connected to private subnets"
      }
	}
}